# tools/developer_tool.py
import json
import textwrap
from typing import Dict, Any
from crewai.tools import tool

def _streamlit_app_code(layout_json: Dict[str, Any]) -> str:
    # Minimal but polished Streamlit app using the layout JSON
    return textwrap.dedent(f"""
    import json
    import streamlit as st

    st.set_page_config(page_title="{layout_json['page'].get('title','Generated Layout')}", layout="wide")

    # Hide default header/footer
    st.markdown(\"\"\"
    <style>
      .block-container {{ padding-top: 1rem; }}
      header {{ visibility: hidden; }}
      footer {{ visibility: hidden; }}
    </style>
    \"\"\", unsafe_allow_html=True)

    layout = {json.dumps(layout_json, indent=2)}

    # Header
    header = next((s for s in layout["page"]["sections"] if s.get("type") == "header"), None)
    if header:
        cols = st.columns([1, 5, 2])
        with cols[0]:
            if header.get("logo"):
                st.image(header["logo"], width=120)
        with cols[1]:
            st.markdown(f"### {{header.get('title','')}}")
            if header.get("subtitle"):
                st.caption(header["subtitle"])
        with cols[2]:
            links = header.get("nav", [])
            if links:
                st.write(" | ".join([f"[{{l['label']}}]({{l['href']}})" for l in links]))

    # Body
    body = next((s for s in layout["page"]["sections"] if s.get("type") == "body"), None)
    if body:
        st.markdown("### Content")
        for fld in body.get("fields", []):
            st.markdown(f"- **{{fld}}**")

        if "text" in body:
            st.write(body["text"])

    # Footer
    footer = next((s for s in layout["page"]["sections"] if s.get("type") == "footer"), None)
    if footer:
        st.markdown("---")
        st.caption(footer.get("content", ""))

    # Responsive styles (not fully applicable in Streamlit, but kept for reference)
    st.sidebar.subheader("Layout (JSON)")
    st.sidebar.code(json.dumps(layout, indent=2))
    """)

@tool("developer_tool")
def developer_tool(inputs: str) -> str:
    """
    Developer Tool:
    Input (stringified JSON): { "query": str, "context": str, "plan": str }
    Always produces:
      {
        "type": "final_package",
        "layout": {...},
        "files": {"app.py": "..."},
        "notes": [...]
      }
    """
    try:
        data = json.loads(inputs) if isinstance(inputs, str) else (inputs or {})
    except Exception:
        data = {}

    query = data.get("query", "")
    context = data.get("context", "")
    plan = data.get("plan", "")

    # Heuristic extraction of candidate fields from context (works with JSONPath-like text)
    candidate_fields = []
    for line in (context or "").splitlines():
        line = line.strip()
        if not line or len(line) > 160:
            continue
        if ":" in line:
            key = line.split(":", 1)[0].strip().strip('"').strip("'")
            if key and key not in candidate_fields and len(key) < 64:
                candidate_fields.append(key)

    # Build JSON layout
    layout: Dict[str, Any] = {
        "page": {
            "title": query or "KB-Generated Layout",
            "sections": [
                {
                    "type": "header",
                    "title": "Complimentary Flight Delay",
                    "subtitle": "Auto-generated using Agentic RAG",
                    "logo": "",  # provide a path/URL if you want
                    "nav": [
                        {"label": "Home", "href": "#"},
                        {"label": "Benefits", "href": "#"},
                        {"label": "Contact", "href": "#"}
                    ],
                },
                {
                    "type": "body",
                    "text": "This section is generated from KB. The fields below were inferred from your JSON/PDF context.",
                    "fields": candidate_fields[:20]
                },
                {
                    "type": "footer",
                    "content": "© Generated by Developer Agent"
                }
            ]
        },
        "styles": {
            "container": {"padding": "16px"},
            "header": {"align": "center"},
            "body": {"gap": "8px"},
            "footer": {"align": "center"}
        },
        "responsive": {
            "breakpoints": {
                "sm": {"container": {"padding": "8px"}},
                "md": {"container": {"padding": "12px"}},
                "lg": {"container": {"padding": "16px"}}
            }
        }
    }

    code = _streamlit_app_code(layout)

    out = {
        "type": "final_package",
        "layout": layout,
        "files": {
            "app.py": code
        },
        "notes": [
            "Fields in body.fields are inferred heuristically from KB text.",
            "Update header.logo to point to your logo if needed.",
            "Streamlit doesn’t fully support CSS breakpoints; responsive info is retained in layout JSON for portability."
        ],
        "plan_used_preview": (plan[:500] + "...") if plan else ""
    }

    return json.dumps(out, indent=2, ensure_ascii=False)
